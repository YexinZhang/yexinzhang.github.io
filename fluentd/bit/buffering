buffering:
    一种将已处理好的待发送的日志放置在临时存储位置的一种机制
默认情况下，当Fluent Bit处理数据时，它使用内存作为存储记录的主要和临时位置，
但是在某些情况下，理想的情况是在文件系统中具有持久缓冲机制以提供聚合和数据安全功能。

chunks:
    当输入插件（源）发出记录时，引擎会将记录分组在一起。
    块大小通常约为2MB。通过配置，引擎决定将此块放置在何处，默认情况是所有块均仅在内存中创建。

Buffering  and Memory:
    上面提到了，chunk是由engine创造存放在内存中的（存放位置可选）,
    如果内存是为输入插件设置的唯一机制，则它将只存储内存大小的数据
    
    这是一种非常快的， 具有低系统消耗的机制，但是当我们的记录因为网络，或者对端主机无响应而累积起来时。
    Fluent Bit的内存使用量会因为累积的数据而增大

    在高负载的场景下产生背压（back pressure）会导致系统OOM，
    # 被压： 
        在数据流从上游生产者向下游消费者传输的过程中，上游生产速度大于下游消费速度，导致下游的 Buffer 溢出，
        这种现象就叫做 Backpressure 出现， 这句话的重点不在于「上游生产速度大于下游消费速度」，而在于「Buffer 溢出」。
        Backpressure 和 Buffer 是一对相生共存的概念，只有设置了 Buffer，才有 Backpressure 出现；
        只要设置了 Buffer，一定存在出现 Backpressure 的风险。

    背压的解决方案就是： 限制INPUT插件可以注册的数据所占有的内存量（其实就是减少输入）；可以通过 mem_buf_limit配置;
    如果某个插件入队的数量超过了mem_buf_limit， 他将不会再接受新的数据, 可以说相关输入插件已经暂停

    mem_buf_limit的变通办法在某些情况和环境下是很好的，它有助于控制服务的内存使用，
    但是如果文件在暂停时旋转，则可能会丢失数据，因为它无法注册，代价是新记录丢失。

    This can happen with any input source plugin. The goal of mem_buf_limit is memory control and survival of the service.

    为了获得完整的数据安全保证，请使用文件系统缓冲。

FileSyetem Buffering ro the recure 
    文件系统缓冲以营救 
    启用文件系统缓冲有助于背压和内存控制

    内存和文件系统缓冲机制并不是相互排斥的，实际上，当为输入插件（源）启用文件系统缓冲时，您将获得两个方面的最佳选择：性能和数据安全性。

    启用文件系统缓冲后，引擎的行为会有所不同，在创建chunk时，它将内容存储在内存中，
    而且还将副本映射到磁盘上（通过mmap（2）），此块在内存中处于活动状态并进行备份磁盘中的状态被称为up，
    这意味着“内存中的块内容已up”。

    默认情况下， 引擎在内存中一共有128个up状态chunk (数量通过storage.max_chunk_up控制) 
    处于up状态的chunk已准备好交付，而仍在接收记录的大块。
    其他所有剩余的Chunk都处于关闭状态，这意味着该状态仅在文件系统中，除非准备好交付，否则不会在内存中使用。

    当我们的INPUT plugin开启mem_buf_limit和storage.type为filesystem时， 当流量达到mem_buf_limit时， input plugin不会被暂停，
    所有的新数据都会进入down状态的chunk中并保存在磁盘上。
    这不仅控制了内存的使用量，而且保证了数据不会丢失

限制文件系统的chunk空间

    fluent bit实现了一个逻辑队列: chunk基于其Tag会被分发到多个目的地;
    因此，在内部，我们保留了创建块的位置以及需要将块移到何处的参考。

    从Fluent Bit v1.6开始，我们为输出插件引入了新的配置属性，称为storage.total_limit_size，
    该属性限制了文件系统中某个逻辑输出目标中存在的Chunk数量。
    如果一个目的地达到了storage.total_limit_size限制，则该逻辑输出目的地的队列中最旧的Chunk将被丢弃。